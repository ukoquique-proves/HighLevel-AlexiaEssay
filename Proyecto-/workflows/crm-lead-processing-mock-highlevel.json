{
  "name": "CRM Lead Processing - Mock HighLevel",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "crm-lead-mock",
        "responseMode": "responseNode"
      },
      "id": "webhook-node",
      "name": "Form Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [0, 0]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced data validation with Business Vertical Extensibility\nconst data = items[0].json;\nconst errors = [];\n\n// --- 1. Get Generic Fields ---\nconst businessType = (data.businessType || 'generic').toString().trim().toLowerCase();\nconst name = (data.name || data.body?.name || '').toString().trim();\nconst email = (data.email || data.body?.email || '').toString().trim().toLowerCase();\nconst phone = (data.phone || data.body?.phone || '').toString().trim();\nconst service = (data.service || data.body?.service || '').toString().trim();\nconst company = (data.company || data.body?.company || '').toString().trim();\nconst budget = (data.budget || data.body?.budget || '').toString();\nconst message = (data.message || data.body?.message || '').toString().trim();\n\n// --- 2. Generic Validation ---\nif (!name) errors.push('Name is required');\nif (!email) errors.push('Email is required');\nif (!phone) errors.push('Phone is required');\nif (!service) errors.push('Service is required');\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nif (email && !emailRegex.test(email)) errors.push('Invalid email format');\n\nconst phoneClean = phone.replace(/[\\s\\-\\(\\)]/g, '');\nif (phone && phoneClean.length < 10) errors.push('Phone number too short');\n\nconst genericServices = ['web-design', 'marketing', 'consulting', 'seo', 'social-media'];\nif (businessType === 'generic' && service && !genericServices.includes(service.toLowerCase())) {\n  errors.push('Invalid service type for generic business.');\n}\n\n// --- 3. Fashion SME Specific Validation ---\nlet fashionSmeData = {};\nif (businessType === 'fashion_sme') {\n  const fashionSector = (data.fashionSector || '').toString().trim();\n  const objective = (data.objective || '').toString().trim();\n\n  if (!fashionSector) errors.push('Fashion Sector is required for Fashion SME');\n  if (!objective) errors.push('Objective is required for Fashion SME');\n\n  const validSectors = ['moda-femenina', 'moda-masculina', 'moda-infantil', 'accesorios', 'calzado'];\n  if (fashionSector && !validSectors.includes(fashionSector.toLowerCase())) {\n    errors.push('Invalid fashion sector.');\n  }\n\n  fashionSmeData = {\n    fashionSector: fashionSector.toLowerCase(),\n    country: (data.country || '').toString().trim(),\n    city: (data.city || '').toString().trim(),\n    currentChannels: data.currentChannels || [],\n    monthlySales: (data.monthlySales || '').toString().trim(),\n    marketingBudget: (data.marketingBudget || '').toString().trim(),\n    hasProductImages: data.hasProductImages === true,\n    brandDifferentiation: (data.brandDifferentiation || '').toString().trim(),\n    objective: objective.toLowerCase()\n  };\n}\n\n// --- 4. Final Error Check ---\nif (errors.length > 0) {\n  throw new Error('Validation failed: ' + errors.join(', '));\n}\n\n// --- 5. Prepare Output Data ---\nconst outputData = {\n  businessType: businessType,\n  name: name,\n  email: email,\n  phone: phoneClean,\n  service: service.toLowerCase(),\n  company: company,\n  budget: budget,\n  message: message,\n  source: 'web-form',\n  timestamp: new Date().toISOString(),\n  ...fashionSmeData // Spread fashion data if it exists\n};\n\nreturn [{ json: outputData }];"
      },
      "id": "validation-node",
      "name": "Validate Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 0]
    },
    {
      "parameters": {
        "jsCode": "// Mock HighLevel integration\nconst data = items[0].json;\n\nconst mockResponse = {\n  contact: {\n    id: 'mock_contact_' + Math.random().toString(36).substr(2, 9),\n    name: data.name,\n    email: data.email,\n    phone: data.phone,\n    company: data.company,\n    tags: ['web-form', data.service],\n    customFields: {\n      budget: data.budget,\n      service: data.service,\n      source: data.source\n    }\n  },\n  opportunity: {\n    id: 'mock_opportunity_' + Math.random().toString(36).substr(2, 9),\n    name: 'Lead: ' + data.name + ' - ' + data.service,\n    value: 2500,\n    stage: 'New Lead',\n    notes: 'Generated via mock integration.\\n\\nMessage: ' + data.message,\n    tags: ['web-form', data.service]\n  }\n};\n\nreturn [{ json: { ...data, ...mockResponse } }];"
      },
      "id": "mock-crm-node",
      "name": "Mock CRM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 0]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": true,
          "message": "Lead processed successfully (mock integration)!",
          "leadData": "={{ $json }}",
          "crmContactId": "={{ $json.contact.id }}",
          "crmOpportunityId": "={{ $json.opportunity.id }}",
          "processedAt": "={{ new Date().toISOString() }}"
        }
      },
      "id": "response-node",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [600, 0]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": false,
          "error": "={{ $json.message || 'Unknown error' }}",
          "status": 400
        },
        "options": {
          "responseCode": 400
        }
      },
      "id": "error-response-node",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [600, 200]
    }
  ],
  "connections": {
    "Form Webhook": {
      "main": [[{
        "node": "Validate Data",
        "type": "main",
        "index": 0
      }]]
    },
    "Validate Data": {
      "main": [[{
        "node": "Mock CRM",
        "type": "main",
        "index": 0
      }]],
      "error": [[{
        "node": "Error Response",
        "type": "main",
        "index": 0
      }]]
    },
    "Mock CRM": {
      "main": [[{
        "node": "Success Response",
        "type": "main",
        "index": 0
      }]]
    }
  }
}
