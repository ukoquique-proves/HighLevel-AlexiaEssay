{
  "name": "CRM Lead Processing - Mock HighLevel",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "crm-lead-mock",
        "responseMode": "responseNode"
      },
      "id": "webhook-node",
      "name": "Form Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [0, 0]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced data validation
const data = items[0].json;
const errors = [];

const name = (data.name || data.body?.name || '').toString().trim();
const email = (data.email || data.body?.email || '').toString().trim().toLowerCase();
const phone = (data.phone || data.body?.phone || '').toString().trim();
const service = (data.service || data.body?.service || '').toString().trim();
const company = (data.company || data.body?.company || '').toString().trim();
const budget = (data.budget || data.body?.budget || '').toString();

if (!name) errors.push('Name is required');
if (!email) errors.push('Email is required');
if (!phone) errors.push('Phone is required');
if (!service) errors.push('Service is required');

const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
if (email && !emailRegex.test(email)) errors.push('Invalid email format');

const phoneClean = phone.replace(/[\\s\\-\\(\\)]/g, '');
if (phone && phoneClean.length < 10) errors.push('Phone number too short');

const validServices = ['web-design', 'marketing', 'consulting', 'seo', 'social-media'];
if (service && !validServices.includes(service.toLowerCase())) errors.push('Invalid service type');

if (errors.length > 0) {
  throw new Error('Validation failed: ' + errors.join(', '));
}

return [{ json: {
  name: name,
  email: email,
  phone: phoneClean,
  service: service.toLowerCase(),
  company: company,
  budget: budget,
  message: (data.message || data.body?.message || '').toString().trim(),
  source: 'web-form',
  timestamp: new Date().toISOString()
} }];"
      },
      "id": "validation-node",
      "name": "Validate Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 0]
    },
    {
      "parameters": {
        "jsCode": "// Mock HighLevel integration
const data = items[0].json;

const mockResponse = {
  contact: {
    id: "mock_contact_" + Math.random().toString(36).substr(2, 9),
    name: data.name,
    email: data.email,
    phone: data.phone,
    company: data.company,
    tags: ["web-form", data.service],
    customFields: {
      budget: data.budget,
      service: data.service,
      source: data.source
    }
  },
  opportunity: {
    id: "mock_opportunity_" + Math.random().toString(36).substr(2, 9),
    name: "Lead: " + data.name + " - " + data.service,
    value: 2500,
    stage: "New Lead",
    notes: "Generated via mock integration.\n\nMessage: " + data.message,
    tags: ["web-form", data.service]
  }
};

return [{ json: { ...data, ...mockResponse } }];"
      },
      "id": "mock-crm-node",
      "name": "Mock CRM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 0]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": true,
          "message": "Lead processed successfully (mock integration)!",
          "leadData": "={{ $json }}",
          "crmContactId": "={{ $json.contact.id }}",
          "crmOpportunityId": "={{ $json.opportunity.id }}",
          "processedAt": "={{ new Date().toISOString() }}"
        }
      },
      "id": "response-node",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [600, 0]
    }
  ],
  "connections": {
    "Form Webhook": {
      "main": [[{
        "node": "Validate Data",
        "type": "main",
        "index": 0
      }]]
    },
    "Validate Data": {
      "main": [[{
        "node": "Mock CRM",
        "type": "main",
        "index": 0
      }]]
    },
    "Mock CRM": {
      "main": [[{
        "node": "Success Response",
        "type": "main",
        "index": 0
      }]]
    }
  }
}
